{"version":3,"sources":["webpack://Recorder/webpack/universalModuleDefinition","webpack://Recorder/webpack/bootstrap","webpack://Recorder/./src/recorder.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Recorder","options","_this","this","context","AudioContext","webkitAudioContext","inputSampleRate","sampleRate","config","sampleBits","indexOf","numChannels","inputSampleBits","outputSampleRate","oututSampleBits","buffer","createScript","createScriptProcessor","createJavaScriptNode","recorder","apply","onaudioprocess","e","data","inputBuffer","getChannelData","push","Float32Array","size","length","lData","rData","ArrayBuffer","byteLength","dData","offset","duration","onprocess","start","isrecording","clear","navigator","mediaDevices","getUserMedia","audio","then","stream","audioInput","createMediaStreamSource","error","throwError","message","connect","destination","pause","ispause","disconnect","resume","stop","play","source","decodeAudioData","getWAV","createBufferSource","getPCM","flat","compress","PCMData","encodePCM","getPCMBlob","Blob","downloadPCM","pcmBlob","download","pcmTemp","encodeWAV","getWAVBlob","type","downloadWAV","wavBlob","destroy","fn","close","blob","oA","document","createElement","href","URL","createObjectURL","click","set","compression","Math","max","floor","result","index","j","bytes","dataLength","DataView","val","min","setInt8","setInt16","channelCount","writeString","setUint32","setUint16","setUint8","getUint8","Error","str","charCodeAt","default"],"mappings":"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","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\n// import * as lamejs from 'lamejs';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Recorder = /** @class */ (function () {\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    function Recorder(options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\r\n        this.inputSampleRate = this.context.sampleRate; // 获取当前输入的采样率\r\n        // 配置config，检查值是否有问题\r\n        this.config = {\r\n            // 采样数位 8, 16\r\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\r\n            // 采样率\r\n            sampleRate: ~[11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\r\n            // 声道数，1或2\r\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\r\n        };\r\n        // 设置采样的参数\r\n        this.inputSampleBits = 16; // 输入采样数位 8, 16\r\n        this.outputSampleRate = this.config.sampleRate; // 输出采样率\r\n        this.oututSampleBits = this.config.sampleBits; // 输出采样数位 8, 16\r\n        this.buffer = [];\r\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\r\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\r\n        var createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\r\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\r\n        // 音频采集\r\n        this.recorder.onaudioprocess = function (e) {\r\n            // getChannelData返回Float32Array类型的pcm数据\r\n            if (1 === _this.config.numChannels) {\r\n                var data = e.inputBuffer.getChannelData(0);\r\n                // 单通道\r\n                _this.buffer.push(new Float32Array(data));\r\n                _this.size += data.length;\r\n            }\r\n            else {\r\n                /*\r\n                 * 双声道处理\r\n                 * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\r\n                 * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\r\n                 */\r\n                var lData = new Float32Array(e.inputBuffer.getChannelData(0)), rData = new Float32Array(e.inputBuffer.getChannelData(1)), \r\n                // 新的数据为左声道和右声道数据量之和\r\n                buffer = new ArrayBuffer(lData.byteLength + rData.byteLength), dData = new Float32Array(buffer), offset = 0;\r\n                for (var i = 0; i < lData.byteLength; ++i) {\r\n                    dData[offset] = lData[i];\r\n                    offset++;\r\n                    dData[offset] = rData[i];\r\n                    offset++;\r\n                }\r\n                _this.buffer.push(dData);\r\n                _this.size += offset;\r\n            }\r\n            // 统计录音时长\r\n            _this.duration += 4096 / _this.inputSampleRate;\r\n            // 录音时长回调\r\n            _this.onprocess && _this.onprocess(_this.duration);\r\n        };\r\n    }\r\n    /**\r\n     * 开始录音\r\n     *\r\n     * @returns {void}\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.start = function () {\r\n        var _this = this;\r\n        if (this.isrecording) {\r\n            // 正在录音，则不允许\r\n            return;\r\n        }\r\n        // 清空数据\r\n        this.clear();\r\n        this.isrecording = true;\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        }).then(function (stream) {\r\n            // audioInput表示音频源节点\r\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\r\n            _this.audioInput = _this.context.createMediaStreamSource(stream);\r\n        }, function (error) {\r\n            // 抛出异常\r\n            Recorder.throwError(error.name + \" : \" + error.message);\r\n        }).then(function () {\r\n            // audioInput 为声音源，连接到处理节点 recorder\r\n            _this.audioInput.connect(_this.recorder);\r\n            // 处理节点 recorder 连接到扬声器\r\n            _this.recorder.connect(_this.context.destination);\r\n        });\r\n    };\r\n    /**\r\n     * 暂停录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.pause = function () {\r\n        if (this.isrecording && !this.ispause) {\r\n            this.ispause = true;\r\n            // 当前不暂停的时候才可以暂停\r\n            this.audioInput && this.audioInput.disconnect();\r\n            this.recorder.disconnect();\r\n        }\r\n    };\r\n    /**\r\n     * 继续录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.resume = function () {\r\n        if (this.isrecording && this.ispause) {\r\n            this.ispause = false;\r\n            // 暂停的才可以开始\r\n            this.audioInput && this.audioInput.connect(this.recorder);\r\n            // 处理节点 recorder 连接到扬声器\r\n            this.recorder.connect(this.context.destination);\r\n        }\r\n    };\r\n    /**\r\n     * 停止录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.stop = function () {\r\n        this.isrecording = false;\r\n        this.audioInput && this.audioInput.disconnect();\r\n        this.recorder.disconnect();\r\n    };\r\n    /**\r\n     * 播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.play = function () {\r\n        var _this = this;\r\n        this.stop();\r\n        // 关闭前一次音频播放\r\n        this.source && this.source.stop();\r\n        this.context.decodeAudioData(this.getWAV().buffer, function (buffer) {\r\n            _this.source = _this.context.createBufferSource();\r\n            // 设置数据\r\n            _this.source.buffer = buffer;\r\n            // connect到扬声器\r\n            _this.source.connect(_this.context.destination);\r\n            _this.source.start();\r\n        }, function (e) {\r\n            Recorder.throwError(e);\r\n        });\r\n    };\r\n    /**\r\n     * 获取PCM编码的二进制数据(dataview)\r\n     *\r\n     * @returns {dataview}  PCM二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.getPCM = function () {\r\n        // 二维转一维\r\n        var data = this.flat();\r\n        // 压缩或扩展\r\n        data = Recorder.compress(data, this.inputSampleRate, this.outputSampleRate);\r\n        // 按采样位数重新编码\r\n        this.PCMData = Recorder.encodePCM(data, this.oututSampleBits);\r\n        return this.PCMData;\r\n    };\r\n    /**\r\n     * 获取PCM格式的blob数据\r\n     *\r\n     * @returns { blob }  PCM格式的blob数据\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.getPCMBlob = function () {\r\n        return new Blob([this.getPCM()]);\r\n    };\r\n    /**\r\n     * 下载录音pcm数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.downloadPCM = function (name) {\r\n        if (name === void 0) { name = 'recorder'; }\r\n        // 先停止\r\n        this.stop();\r\n        var pcmBlob = this.getPCMBlob();\r\n        this.download(pcmBlob, name, 'pcm');\r\n    };\r\n    /**\r\n     * 获取WAV编码的二进制数据(dataview)\r\n     *\r\n     * @returns {dataview}  WAV编码的二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.getWAV = function () {\r\n        var pcmTemp = this.getPCM(), wavTemp = Recorder.encodeWAV(pcmTemp, this.inputSampleRate, this.outputSampleRate, this.config.numChannels, this.oututSampleBits);\r\n        return wavTemp;\r\n    };\r\n    /**\r\n     * 获取WAV音频的blob数据\r\n     *\r\n     * @returns { blob }    wav格式blob数据\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.getWAVBlob = function () {\r\n        return new Blob([this.getWAV()], { type: 'audio/wav' });\r\n    };\r\n    /**\r\n     * 下载录音的wav数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.downloadWAV = function (name) {\r\n        if (name === void 0) { name = 'recorder'; }\r\n        // 先停止\r\n        this.stop();\r\n        var wavBlob = this.getWAVBlob();\r\n        this.download(wavBlob, name, 'wav');\r\n    };\r\n    /**\r\n     * 销毁录音对象\r\n     * @param {*} fn        回调函数\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.destroy = function (fn) {\r\n        var _this = this;\r\n        this.context.close().then(function () {\r\n            fn && fn.call(_this);\r\n        });\r\n    };\r\n    /**\r\n     * 下载录音文件\r\n     * @private\r\n     * @param {*} blob      blob数据\r\n     * @param {string} name 下载的文件名\r\n     * @param {string} type 下载的文件后缀\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.download = function (blob, name, type) {\r\n        try {\r\n            var oA = document.createElement('a');\r\n            oA.href = window.URL.createObjectURL(blob);\r\n            oA.download = name + '.' + type;\r\n            oA.click();\r\n        }\r\n        catch (e) {\r\n            Recorder.throwError(e);\r\n        }\r\n    };\r\n    /**\r\n     * 清空状态，重新开始录音（变量初始化）\r\n     *\r\n     * @private\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.clear = function () {\r\n        this.buffer.length = 0;\r\n        this.size = 0;\r\n        this.PCMData = null;\r\n        this.audioInput = null;\r\n        this.duration = 0;\r\n        this.ispause = false;\r\n        // 录音前，关闭录音播放\r\n        this.source && this.source.stop();\r\n    };\r\n    /**\r\n     * 将二维数组转一维\r\n     *\r\n     * @private\r\n     * @returns  {float32array}     音频pcm二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.prototype.flat = function () {\r\n        // 合并\r\n        var data = new Float32Array(this.size), offset = 0; // 偏移量计算\r\n        // 将二维数据，转成一维数据\r\n        for (var i = 0; i < this.buffer.length; i++) {\r\n            data.set(this.buffer[i], offset);\r\n            offset += this.buffer[i].length;\r\n        }\r\n        return data;\r\n    };\r\n    /**\r\n     * 数据合并压缩\r\n     * 根据输入和输出的采样率压缩数据，\r\n     * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\r\n     * 所以输入数据中每隔3取1位\r\n     *\r\n     * @static\r\n     * @param {float32array} data       [-1, 1]的pcm数据\r\n     * @param {number} inputSampleRate  输入采样率\r\n     * @param {number} outputSampleRate 输出采样率\r\n     * @returns  {float32array}         压缩处理后的二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.compress = function (data, inputSampleRate, outputSampleRate) {\r\n        // 压缩，根据采样率进行压缩\r\n        var compression = Math.max(Math.floor(inputSampleRate / outputSampleRate), 1), length = data.length / compression, result = new Float32Array(length), index = 0, j = 0;\r\n        // 循环间隔 compression 位取一位数据\r\n        while (index < length) {\r\n            result[index] = data[j];\r\n            j += compression;\r\n            index++;\r\n        }\r\n        // 返回压缩后的一维数据\r\n        return result;\r\n    };\r\n    /**\r\n     * 转换到我们需要的对应格式的编码\r\n     *\r\n     * @static\r\n     * @param {float32array} bytes      pcm二进制数据\r\n     * @param {number} sampleBits       采样位数\r\n     * @returns {dataview}              pcm二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.encodePCM = function (bytes, sampleBits) {\r\n        var offset = 0, dataLength = bytes.length * (sampleBits / 8), buffer = new ArrayBuffer(dataLength), data = new DataView(buffer);\r\n        // 写入采样数据\r\n        if (sampleBits === 8) {\r\n            for (var i = 0; i < bytes.length; i++, offset++) {\r\n                // 范围[-1, 1]\r\n                var s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 8位采样位划分成2^8=256份，它的范围是0-255; \r\n                // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\r\n                var val = s < 0 ? s * 128 : s * 127;\r\n                val = +val + 128;\r\n                data.setInt8(offset, val);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < bytes.length; i++, offset += 2) {\r\n                var s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 16位的划分的是2^16=65536份，范围是-32768到32767\r\n                // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\r\n                data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n            }\r\n        }\r\n        return data;\r\n    };\r\n    /**\r\n     * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\r\n     * 所以，此处只需要在pcm数据前增加下就行了。\r\n     *\r\n     * @static\r\n     * @param {DataView} bytes           pcm二进制数据\r\n     * @param {Number} inputSampleRate   输入采样率\r\n     * @param {Number} outputSampleRate  输出采样率\r\n     * @param {Number} numChannels       声道数\r\n     * @param {Number} oututSampleBits   输出采样位数\r\n     * @returns {DataView}               wav二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.encodeWAV = function (bytes, inputSampleRate, outputSampleRate, numChannels, oututSampleBits) {\r\n        var sampleRate = Math.min(inputSampleRate, outputSampleRate), sampleBits = oututSampleBits, buffer = new ArrayBuffer(44 + bytes.byteLength), data = new DataView(buffer), channelCount = numChannels, // 声道\r\n        offset = 0;\r\n        // 资源交换文件标识符\r\n        writeString(data, offset, 'RIFF');\r\n        offset += 4;\r\n        // 下个地址开始到文件尾总字节数,即文件大小-8\r\n        data.setUint32(offset, 36 + bytes.byteLength, true);\r\n        offset += 4;\r\n        // WAV文件标志\r\n        writeString(data, offset, 'WAVE');\r\n        offset += 4;\r\n        // 波形格式标志\r\n        writeString(data, offset, 'fmt ');\r\n        offset += 4;\r\n        // 过滤字节,一般为 0x10 = 16\r\n        data.setUint32(offset, 16, true);\r\n        offset += 4;\r\n        // 格式类别 (PCM形式采样数据)\r\n        data.setUint16(offset, 1, true);\r\n        offset += 2;\r\n        // 声道数\r\n        data.setUint16(offset, channelCount, true);\r\n        offset += 2;\r\n        // 采样率,每秒样本数,表示每个通道的播放速度\r\n        data.setUint32(offset, sampleRate, true);\r\n        offset += 4;\r\n        // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\r\n        data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), true);\r\n        offset += 4;\r\n        // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\r\n        data.setUint16(offset, channelCount * (sampleBits / 8), true);\r\n        offset += 2;\r\n        // 采样位数\r\n        data.setUint16(offset, sampleBits, true);\r\n        offset += 2;\r\n        // 数据标识符\r\n        writeString(data, offset, 'data');\r\n        offset += 4;\r\n        // 采样数据总数,即数据总大小-44\r\n        data.setUint32(offset, bytes.byteLength, true);\r\n        offset += 4;\r\n        // 给wav头增加pcm体\r\n        for (var i = 0; i < bytes.byteLength;) {\r\n            data.setUint8(offset, bytes.getUint8(i));\r\n            offset++;\r\n            i++;\r\n        }\r\n        return data;\r\n    };\r\n    /**\r\n     * 异常处理\r\n     * @static\r\n     * @param {*} message   错误消息\r\n     * @memberof Recorder\r\n     */\r\n    Recorder.throwError = function (message) {\r\n        throw new Error(message);\r\n    };\r\n    return Recorder;\r\n}());\r\n/**\r\n * 在data中的offset位置开始写入str字符串\r\n * @param {TypedArrays} data    二进制数据\r\n * @param {Number}      offset  偏移量\r\n * @param {String}      str     字符串\r\n */\r\nfunction writeString(data, offset, str) {\r\n    for (var i = 0; i < str.length; i++) {\r\n        data.setUint8(offset + i, str.charCodeAt(i));\r\n    }\r\n}\r\nexports.default = Recorder;\r\n"],"sourceRoot":""}