{"version":3,"sources":["webpack://Recorder/webpack/universalModuleDefinition","webpack://Recorder/webpack/bootstrap","webpack://Recorder/./src/recorder.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Recorder","options","arguments","length","undefined","_classCallCheck","this","config","sampleBits","includes","sampleRate","numChannels","size","buffer","PCMData","context","AudioContext","webkitAudioContext","createScript","createScriptProcessor","createJavaScriptNode","recorder","apply","_this","onaudioprocess","e","data","inputBuffer","getChannelData","push","Float32Array","navigator","mediaDevices","getUserMedia","audio","then","stream","audioInput","createMediaStreamSource","error","code","throwError","source","disconnect","message","Error","clear","connect","destination","inputSampleRate","inputSampleBits","outputSampleRate","oututSampleBits","_this2","decodeAudioData","encodeWAV","createBufferSource","start","console","log","stop","encodePCM","Blob","getPCM","getWAV","type","offset","set","compression","parseInt","result","index","j","bytes","compress","Math","min","dataLength","ArrayBuffer","DataView","val","max","setInt8","setInt16","writeString","setUint32","byteLength","setUint16","resultConstructor","totalLength","_len","arrays","Array","_key","_i","_arrays","arr","_i2","_arrays2","len","getInt8","combineDataView","str","setUint8","charCodeAt"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,GAAAH,GACA,iBAAAC,QACAA,QAAA,SAAAD,IAEAD,EAAA,SAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,mNClFMC,aAOF,SAAAA,IAA0B,IAAdC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,gGAAIG,CAAAC,KAAAN,GAEtBM,KAAKC,OAAS,CAEVC,WAAY,CAAC,EAAG,IAAIC,SAASR,EAAQO,YAAcP,EAAQO,WAAa,GAExEE,WAAY,CAAC,MAAO,MAAO,KAAO,MAAO,MAAOD,SAASR,EAAQS,YAAcT,EAAQS,WAAa,KAEpGC,YAAa,CAAC,EAAG,GAAGF,SAASR,EAAQO,YAAcP,EAAQO,WAAa,GAE5EF,KAAKM,KAAO,EACZN,KAAKO,OAAS,GACdP,KAAKQ,QAAU,KAEfR,KAAKS,QAAU,IAAKnD,OAAOoD,cAAgBpD,OAAOqD,oBAGlDX,KAAKY,aAAeZ,KAAKS,QAAQI,uBAAyBb,KAAKS,QAAQK,qBACvEd,KAAKe,SAAWf,KAAKY,aAAaI,MAAMhB,KAAKS,QAAS,CAAC,KAAMT,KAAKC,OAAOI,YAAaL,KAAKC,OAAOI,qEAG9F,IAAAY,EAAAjB,KASJ,OAPAA,KAAKe,SAASG,eAAiB,SAAAC,GAC3B,IAAIC,EAAOD,EAAEE,YAAYC,eAAe,GAExCL,EAAKV,OAAOgB,KAAK,IAAIC,aAAaJ,IAClCH,EAAKX,MAAQc,EAAKvB,QAGf4B,UAAUC,aAAaC,aAAa,CACnCC,OAAO,IACRC,KAAK,SAAAC,GAGJb,EAAKc,WAAad,EAAKR,QAAQuB,wBAAwBF,IACxD,SAAAG,GACC,OAAQA,EAAMC,MAAQD,EAAMhE,MACxB,IAAK,oBACL,IAAK,wBACDyB,EAASyC,WAAW,aACpB,MACJ,IAAK,sBACL,IAAK,oBACDzC,EAASyC,WAAW,eACpB,MACJ,IAAK,8BACL,IAAK,4BACDzC,EAASyC,WAAW,gBACpB,MACJ,QACIzC,EAASyC,WAAW,iBAAmBF,EAAMC,MAAQD,EAAMhE,0CAQ3E+B,KAAKO,OAAOV,OAAS,EACrBG,KAAKM,KAAO,EACZN,KAAKQ,QAAU,KAEXR,KAAKoC,SAELpC,KAAKoC,OAAOC,aACZrC,KAAKoC,OAAS,yCAKXE,GACP,MAAM,IAAIC,MAAOD,mCAMjBtC,KAAKwC,QAGLxC,KAAK+B,WAAWU,QAAQzC,KAAKe,UAE7Bf,KAAKe,SAAS0B,QAAQzC,KAAKS,QAAQiC,aAEnC1C,KAAK2C,gBAAkB3C,KAAKS,QAAQL,WACpCJ,KAAK4C,gBAAkB,GACvB5C,KAAK6C,iBAAmB7C,KAAKC,OAAOG,WACpCJ,KAAK8C,gBAAkB9C,KAAKC,OAAOC,0CAKnCF,KAAKe,SAASsB,aACdrC,KAAK+B,WAAWM,4CAIb,IAAAU,EAAA/C,KACTA,KAAKS,QAAQuC,gBAAgBhD,KAAKiD,YAAY1C,OAAQ,SAAAA,GAC5CwC,EAAKX,OAASW,EAAKtC,QAAQyC,qBAG3BH,EAAKX,OAAO7B,OAASA,EAErBwC,EAAKX,OAAOK,QAAQM,EAAKtC,QAAQiC,aACjCK,EAAKX,OAAOe,SACb,WACCC,QAAQC,IAAI,6CAMhBrD,KAAKwC,yCAOL,OAFAxC,KAAKsD,OAEEtD,KAAKQ,UAAaR,KAAKQ,QAAUR,KAAKuD,kDAK7C,OAAO,IAAIC,KAAK,CAAExD,KAAKyD,4CAOvB,OAFAzD,KAAKsD,OAEEtD,KAAKiD,iDAKZ,OAAO,IAAIO,KAAK,CAAExD,KAAK0D,UAAY,CAAEC,KAAM,wFAiB3C,IAHA,IAAIvC,EAAO,IAAII,aAAaxB,KAAKM,MAC7BsD,EAAS,EAEJlG,EAAI,EAAGA,EAAIsC,KAAKO,OAAOV,OAAQnC,IACpC0D,EAAKyC,IAAI7D,KAAKO,OAAO7C,GAAIkG,GACzBA,GAAU5D,KAAKO,OAAO7C,GAAGmC,OAQ7B,IALA,IAAIiE,EAAcC,SAAS/D,KAAK2C,gBAAkB3C,KAAK6C,iBAAkB,KAAO,EAC5EhD,EAASuB,EAAKvB,OAASiE,EACvBE,EAAS,IAAIxC,aAAa3B,GAC1BoE,EAAQ,EAAGC,EAAI,EAEZD,EAAQpE,GACXmE,EAAOC,GAAS7C,EAAK8C,GACrBA,GAAKJ,EACLG,IAGJ,OAAOD,sCAQP,IAAIG,EAAQnE,KAAKoE,WACblE,EAAamE,KAAKC,IAAItE,KAAK4C,gBAAiB5C,KAAK8C,iBACjDc,EAAS,EACTW,EAAaJ,EAAMtE,QAAUK,EAAa,GAC1CK,EAAS,IAAIiE,YAAYD,GACzBnD,EAAO,IAAIqD,SAASlE,GAGxB,GAAmB,IAAfL,EACA,IAAK,IAAIxC,EAAI,EAAGA,EAAIyG,EAAMtE,OAAQnC,IAAKkG,IAAU,CAE7C,IAGIc,GAHAjF,EAAI4E,KAAKM,KAAK,EAAGN,KAAKC,IAAI,EAAGH,EAAMzG,MAGzB,EAAQ,IAAJ+B,EAAc,IAAJA,EAC5BiF,EAAMX,SAASW,EAAM,KACrBtD,EAAKwD,QAAQhB,EAAQc,GAAK,QAG9B,IAAShH,EAAI,EAAGA,EAAIyG,EAAMtE,OAAQnC,IAAKkG,GAAU,EAAG,CAChD,IAAInE,EAAI4E,KAAKM,KAAK,EAAGN,KAAKC,IAAI,EAAGH,EAAMzG,KAGvC0D,EAAKyD,SAASjB,EAAQnE,EAAI,EAAQ,MAAJA,EAAiB,MAAJA,GAAY,GAI/D,OAAO2B,sCAMP,IAAIhB,EAAaiE,KAAKC,IAAItE,KAAK2C,gBAAiB3C,KAAK6C,kBACjD3C,EAAamE,KAAKC,IAAItE,KAAK4C,gBAAiB5C,KAAK8C,iBACjDqB,EAAQnE,KAAKuD,YACbhD,EAAS,IAAIiE,YAAY,IACzBpD,EAAO,IAAIqD,SAASlE,GAGpBqD,EAAS,EAgCb,OA7BAkB,EAAY1D,EAAMwC,EAAQ,QAASA,GAAU,EAE7CxC,EAAK2D,UAAUnB,EAAQ,GAAKO,EAAMa,YAAY,GAE9CF,EAAY1D,EAFyCwC,GAAU,EAErC,QAE1BkB,EAAY1D,EAFuBwC,GAAU,EAEnB,QAASA,GAAU,EAE7CxC,EAAK2D,UAAUnB,EAAQ,IAAI,GAAOA,GAAU,EAE5CxC,EAAK6D,UAAUrB,EAAQ,GAAG,GAAOA,GAAU,EAE3CxC,EAAK6D,UAAUrB,EAhBI,GAgBkB,GAAOA,GAAU,EAEtDxC,EAAK2D,UAAUnB,EAAQxD,GAAY,GAAOwD,GAAU,EAEpDxC,EAAK2D,UAAUnB,EApBI,EAoBmBxD,GAAcF,EAAa,IAAI,GAAO0D,GAAU,EAEtFxC,EAAK6D,UAAUrB,EAAwB1D,EAAa,EAtBjC,GAsBqC,GAAO0D,GAAU,EAEzExC,EAAK6D,UAAUrB,EAAQ1D,GAAY,GAEnC4E,EAAY1D,EAF8BwC,GAAU,EAE1B,QAASA,GAAU,EAE7CxC,EAAK2D,UAAUnB,EAAQO,EAAMa,YAAY,GAAOpB,GAAU,EAG1DxC,EAsBR,SAAyB8D,GAA8B,IACnD,IAAIC,EAAc,EACdvB,EAAS,EAFsCwB,EAAAxF,UAAAC,OAARwF,EAAQ,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAARF,EAAQE,EAAA,GAAA3F,UAAA2F,GAInD,QAAAC,EAAA,EAAAC,EAAgBJ,EAAhBG,EAAAC,EAAA5F,OAAA2F,IAAwB,CAAnB,IAAIE,EAAGD,EAAAD,GACRL,GAAeO,EAAI7F,QAAU6F,EAAIV,WAMrC,IAHA,IAAIzE,EAAS,IAAIiE,YAAYW,GACzBnB,EAAS,IAAIkB,EAAkB3E,GAEnCoF,EAAA,EAAAC,EAAgBP,EAAhBM,EAAAC,EAAA/F,OAAA8F,IAEI,IAFC,IAAID,EAAGE,EAAAD,GAECjI,EAAI,EAAGmI,EAAMH,EAAIV,WAAYtH,EAAImI,IAAOnI,EAC7CsG,EAAOY,QAAQhB,EAAQ8B,EAAII,QAAQpI,IACnCkG,GAAU,EAIlB,OAAOI,EAzCI+B,CAAgBtB,SAAUrD,EAAM+C,wCAW/C,SAASW,EAAY1D,EAAMwC,EAAQoC,GAC/B,IAAK,IAAItI,EAAI,EAAGA,EAAIsI,EAAInG,OAAQnC,IAC5B0D,EAAK6E,SAASrC,EAASlG,EAAGsI,EAAIE,WAAWxI,IAgClCgC","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class Recorder {\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16\r\n     * sampleRate，采样率，一般 11025、22050、24000、44100、48000\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options = {}) {\r\n        // 配置config，检查值是否有问题\r\n        this.config = {\r\n            // 采样数位 8, 16\r\n            sampleBits: [8, 16].includes(options.sampleBits) ? options.sampleBits : 16,\r\n            // 采样率(16000)\r\n            sampleRate: [11025, 22050, 24000, 44100, 48000].includes(options.sampleRate) ? options.sampleRate : 16000,\r\n            // 声道数，1或2\r\n            numChannels: [1, 2].includes(options.sampleBits) ? options.sampleBits : 1,\r\n        };\r\n        this.size = 0;              // 录音文件总长度\r\n        this.buffer = [];           // 录音缓存\r\n        this.PCMData = null;        // 存储转换后的pcm数据\r\n\r\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\r\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\r\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\r\n        this.createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\r\n        this.recorder = this.createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\r\n    }\r\n\r\n    ready() {\r\n        // 音频采集\r\n        this.recorder.onaudioprocess = e => {\r\n            let data = e.inputBuffer.getChannelData(0);\r\n            // 收集音频数据，这儿的buffer是二维的\r\n            this.buffer.push(new Float32Array(data));\r\n            this.size += data.length;\r\n        }\r\n    \r\n        return navigator.mediaDevices.getUserMedia({\r\n                audio: true\r\n            }).then(stream => {\r\n                // audioInput表示音频源节点\r\n                // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\r\n                this.audioInput = this.context.createMediaStreamSource(stream);\r\n            }, error => {\r\n                switch (error.code || error.name) {\r\n                    case 'PERMISSION_DENIED':\r\n                    case 'PermissionDeniedError':\r\n                        Recorder.throwError('用户拒绝提供信息。');\r\n                        break;\r\n                    case 'NOT_SUPPORTED_ERROR':\r\n                    case 'NotSupportedError':\r\n                        Recorder.throwError('浏览器不支持硬件设备。');\r\n                        break;\r\n                    case 'MANDATORY_UNSATISFIED_ERROR':\r\n                    case 'MandatoryUnsatisfiedError':\r\n                        Recorder.throwError('无法发现指定的硬件设备。');\r\n                        break;\r\n                    default:\r\n                        Recorder.throwError('无法打开麦克风。异常信息:' + (error.code || error.name));\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    // 清空\r\n    clear() {\r\n        this.buffer.length = 0;\r\n        this.size = 0;\r\n        this.PCMData = null;\r\n\r\n        if (this.source) {\r\n            // 录音前，关闭录音播放\r\n            this.source.disconnect();\r\n            this.source = null;\r\n        }\r\n    }\r\n\r\n    // 异常处理\r\n    throwError(message) {\r\n        throw new Error (message);\r\n    }\r\n\r\n    // 开始录音\r\n    start() {\r\n        // 清空数据\r\n        this.clear();\r\n    \r\n        // audioInput 为声音源，连接到处理节点 recorder\r\n        this.audioInput.connect(this.recorder);\r\n        // 处理节点 recorder 连接到扬声器\r\n        this.recorder.connect(this.context.destination);\r\n        // 设置压缩参数\r\n        this.inputSampleRate = this.context.sampleRate;     // 获取当前输入的采样率\r\n        this.inputSampleBits = 16;                          // 输入采样数位 8, 16\r\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\r\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\r\n    }\r\n\r\n    // 停止录音\r\n    stop() {\r\n        this.recorder.disconnect();\r\n        this.audioInput.disconnect();\r\n    }\r\n\r\n    // 播放声音\r\n    play() {\r\n\t\tthis.context.decodeAudioData(this.encodeWAV().buffer, buffer => {\r\n            this.source = this.context.createBufferSource();\r\n\r\n            // 设置数据\r\n            this.source.buffer = buffer;\r\n            // connect到扬声器\r\n            this.source.connect(this.context.destination);\r\n            this.source.start();\r\n        }, function() {\r\n            console.log('error');\r\n        });\r\n    }\r\n\r\n    // 销毁，防止内存泄漏\r\n    destory() {    \r\n        this.clear();\r\n    }\r\n\r\n    // 获取PCM编码的二进制数据\r\n    getPCM() {\r\n        this.stop();\r\n        // 利用存储的PCMData，节省性能\r\n        return this.PCMData || ( this.PCMData = this.encodePCM() );\r\n    }\r\n\r\n    // 获取不压缩的PCM格式的编码\r\n    getPCMBlob() {\r\n        return new Blob([ this.getPCM() ]);\r\n    }\r\n\r\n    // 获取WAV编码的二进制数据\r\n    getWAV() {\r\n        this.stop();\r\n    \r\n        return this.encodeWAV();\r\n    }\r\n\r\n    // 获取不压缩的WAV格式的编码\r\n    getWAVBlob() {\r\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\r\n    }\r\n\r\n    // 压缩pcm数据\r\n    compressPCM() {\r\n        // toDo..\r\n    }\r\n\r\n    // 数据合并压缩\r\n    // 根据输入和输出的采样率压缩数据，\r\n    // 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\r\n    // 所以输入数据中每隔3取1位\r\n    compress() {\r\n        // 合并\r\n        var data = new Float32Array(this.size);\r\n        var offset = 0; // 偏移量计算\r\n        // 将二维数据，转成一维数据\r\n        for (var i = 0; i < this.buffer.length; i++) {\r\n            data.set(this.buffer[i], offset);\r\n            offset += this.buffer[i].length;\r\n        }\r\n        // 压缩，根据采样率进行压缩\r\n        var compression = parseInt(this.inputSampleRate / this.outputSampleRate, 10) || 1;\r\n        var length = data.length / compression;\r\n        var result = new Float32Array(length);\r\n        var index = 0, j = 0;\r\n        // 循环间隔 compression 位取一位数据\r\n        while (index < length) {\r\n            result[index] = data[j];\r\n            j += compression;\r\n            index++;\r\n        }\r\n        // 返回压缩后的一维数据\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 转换到我们需要的对应格式的编码\r\n     * return {DataView}    pcm编码的数据\r\n     */\r\n    encodePCM() {\r\n        let bytes = this.compress(),\r\n            sampleBits = Math.min(this.inputSampleBits, this.oututSampleBits),\r\n            offset = 0,\r\n            dataLength = bytes.length * (sampleBits / 8),\r\n            buffer = new ArrayBuffer(dataLength),\r\n            data = new DataView(buffer);\r\n    \r\n        // 写入采样数据\r\n        if (sampleBits === 8) {\r\n            for (var i = 0; i < bytes.length; i++, offset++) {\r\n                // 范围[-1, 1]\r\n                var s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 8位采样位划分成2^8=256份，它的范围是0-255; \r\n                // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\r\n                var val = s < 0 ? s * 128 : s * 127;\r\n                val = parseInt(val + 128);\r\n                data.setInt8(offset, val, true);\r\n            }\r\n        } else {\r\n            for (var i = 0; i < bytes.length; i++, offset += 2) {\r\n                var s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 16位的划分的是2^16=65536份，范围是-32768到32767\r\n                // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\r\n                data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n            }\r\n        }\r\n    \r\n        return data;\r\n    }\r\n\r\n    // 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\r\n    // 所以，此处只需要在pcm数据前增加下就行了。\r\n    encodeWAV() {\r\n        var sampleRate = Math.min(this.inputSampleRate, this.outputSampleRate);\r\n        var sampleBits = Math.min(this.inputSampleBits, this.oututSampleBits);\r\n        var bytes = this.encodePCM();\r\n        var buffer = new ArrayBuffer(44);\r\n        var data = new DataView(buffer);\r\n    \r\n        var channelCount = 1;   // 单声道\r\n        var offset = 0;\r\n    \r\n        // 资源交换文件标识符 \r\n        writeString(data, offset, 'RIFF'); offset += 4;\r\n        // 下个地址开始到文件尾总字节数,即文件大小-8 \r\n        data.setUint32(offset, 36 + bytes.byteLength, true); offset += 4;\r\n        // WAV文件标志\r\n        writeString(data, offset, 'WAVE'); offset += 4;\r\n        // 波形格式标志 \r\n        writeString(data, offset, 'fmt '); offset += 4;\r\n        // 过滤字节,一般为 0x10 = 16 \r\n        data.setUint32(offset, 16, true); offset += 4;\r\n        // 格式类别 (PCM形式采样数据) \r\n        data.setUint16(offset, 1, true); offset += 2;\r\n        // 通道数 \r\n        data.setUint16(offset, channelCount, true); offset += 2;\r\n        // 采样率,每秒样本数,表示每个通道的播放速度 \r\n        data.setUint32(offset, sampleRate, true); offset += 4;\r\n        // 波形数据传输率 (每秒平均字节数) 单声道×每秒数据位数×每样本数据位/8 \r\n        data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), true); offset += 4;\r\n        // 快数据调整数 采样一次占用字节数 单声道×每样本的数据位数/8 \r\n        data.setUint16(offset, channelCount * (sampleBits / 8), true); offset += 2;\r\n        // 每样本数据位数 \r\n        data.setUint16(offset, sampleBits, true); offset += 2;\r\n        // 数据标识符 \r\n        writeString(data, offset, 'data'); offset += 4;\r\n        // 采样数据总数,即数据总大小-44 \r\n        data.setUint32(offset, bytes.byteLength, true); offset += 4;\r\n        \r\n        // 给pcm文件增加头\r\n        data = combineDataView(DataView, data, bytes);\r\n    \r\n        return data;\r\n    }\r\n}\r\n\r\n/**\r\n * 在data中的offset位置开始写入str字符串\r\n * @param {TypedArrays} data 二进制数据\r\n * @param {String}      str  字符串\r\n */\r\nfunction writeString(data, offset, str) {\r\n    for (var i = 0; i < str.length; i++) {\r\n        data.setUint8(offset + i, str.charCodeAt(i));\r\n    }\r\n}\r\n\r\n/**\r\n * 合并二进制数据\r\n * @param {TypedArrays} resultConstructor   需要合并成的数据类型\r\n * @param {TypedArrays} ...arrays           需要合并的数据\r\n */\r\nfunction combineDataView(resultConstructor, ...arrays) {\r\n    let totalLength = 0,\r\n        offset = 0;\r\n    // 统计长度\r\n    for (let arr of arrays) {\r\n        totalLength += arr.length || arr.byteLength;\r\n    }\r\n    // 创建新的存放变量\r\n    let buffer = new ArrayBuffer(totalLength),\r\n        result = new resultConstructor(buffer);\r\n    // 设置数据\r\n    for (let arr of arrays) {\r\n        // dataview合并\r\n        for (let i = 0, len = arr.byteLength; i < len; ++i) {\r\n            result.setInt8(offset, arr.getInt8(i));\r\n            offset += 1;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\nexport default Recorder;\r\n"],"sourceRoot":""}